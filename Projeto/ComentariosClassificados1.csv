author,text,likes,published_at,sentimento
@MichelCDiz,"O bom de ponteiros é a magica do compartilhamento Outros cantos do código podem acessar o mesmo dado ou alterar ele Sem eu precisar criar algo complexo e reativo Sem parametrizar ou distribuir de alguma outra forma Eu acho interessante por isso Claro, tendo cuidado quando usando Threads ou routines para evitar races",0,2025-05-05T17:37:10Z,POS
@_j.silveira,"O problema é quando começa ponteiro de ponteiro hahaha Na faculdade a cadeira de estrutura de dados foi em C, foi legal ver a questão da manipulação da memoria",0,2025-05-05T16:44:20Z,NEG
@DrAnony,"Esse tal de Galego ta com coisa, ele sabe exatamente o que eu estou precisando kkk",0,2025-05-05T16:08:06Z,POS
@ëduardo_araujo_silva,"Galego, um desafio para você explicar os conceitos de Ownership e Borrowship do Rust com essa mesma didática Mesmo que pra isso seja necessário entender memória static e memória heap",2,2025-05-05T15:52:45Z,POS
@caiomadmo2263,Quem é o Augusto Galego da ciência de dados?,0,2025-05-05T15:30:50Z,NEG
@unnwas,"Por isso sempre recomendo a galera dar uma brincada com C no começo, é ""chato"" comparado a Python e outras pq nelas você consegue fazer algo tangível mais cedo, mas o que tu aprende com C transfere pra todas as outras linguagens",7,2025-05-05T15:28:07Z,POS
@skaarl7681,"sacanagem, na minha vez não contaram kkkkkkk",0,2025-05-05T14:44:44Z,NEG
@DiogoScarmagnani,"PJ não tem aposentadoria, né papai",0,2025-05-05T14:03:02Z,NEG
@xxhhiiikk,"Também vale lembrar que nem todo valor fica alocado na memoria em si, muitos ficam em registradores que não tem um endereço na memoria",0,2025-05-05T13:54:18Z,NEG
@s.r8161,Cê conseguiu me explicar em 11min algo que eu estava procrastinando para entender por achar muito confuso,0,2025-05-05T13:24:36Z,NEG
@wallycoding,"O motivo pelo qual o Rust tem essa regra de empréstimo mutável é explicado logo no início da doc Resumidamente, permitir duas referências mutáveis ao mesmo dado pode causar comportamentos inesperados se forem alteradas sem controle, mesmo em single thread Ainda assim, a mutabilidade é sempre uma restrição em nível de software Ou seja, se eu escrever um programa em C que acesse diretamente o bloco de memória correspondente a uma variável constante em Rust, ainda consigo modificálo",0,2025-05-05T13:06:55Z,NEG
@pedroaugustopereira2089,"Baita video mano, curti demais!",0,2025-05-05T13:06:31Z,NEG
@tiltltt,"O que me complica de dominar pointeiros é a sintaxe meio esquisita, o conceito em si não é difícil Em C o  você usa tanto pra declarar que algo está apontando e também para referenciar o valor que está dentro de uma variável int ptr  a  ptr é um pointeiro de int que aponta para o endereço de memória em a int b  ptr  b é um int cujo valor é o que está armazenado no endereço que ptr aponta Pra mim isso não é claro, e acho que piora no caso de você fazer aritmética de ponteiros, como assim int a  0,1,2 int ptr  a  ptr é um ponteiro que aponta para o endereço de memória do primeiro elemento de a int b  (ptr1)  b é um int armazenado no endereço referenciado por ptr, 1, ou seja, o indice 1 do array E nem me fale de mandar por referência qualquer estrutra de dimensão maior para uma função, quando começamos a ter ponteiros de ponteiros Ou usar structs por referência quando precisamos usar """" pra pegar o valor armazenado no struct, ao invés do comum """"",0,2025-05-05T13:00:43Z,NEU
@StevenAraújo-j9x,repassar?,0,2025-05-05T12:45:01Z,NEG
@eduardo.z6909,"Como alguém que profissionalmente coda em Python, digo você só realmente aprende a programar com linguagem de baixo nível Antes disso, você tá apenas brincando Vai aprender C E obrigado pelo vídeo!",11,2025-05-05T12:33:21Z,NEG
@nildeslopes3296,"Cara parabéns pela explicação, este tipo de didática para explicar esse tipo de assunto é o que falta no meu curso",1,2025-05-05T12:25:23Z,NEU
@carloskombo2967,"Ah, ponteiros Filhos do diabo, finalmente explicado com uma didática fenomenal )",1,2025-05-05T12:16:08Z,POS
@isaacestevangeuster,Incrível como o Galego antecipa o que eu estou estudando!,5,2025-05-05T12:12:55Z,POS
@caioazvdo,Então pj não tem aposentadoria né papai?,1,2025-05-05T12:12:54Z,NEG
